{
  "_from": "upload",
  "_id": "upload@1.1.1",
  "_inBundle": false,
  "_integrity": "sha512-/pk5798iVP88q0HDHBJHxurVOJTnjXGyJXCMd/JrmzgoXEiYo3W2w9BiqtjqGJJJwyk8vo3wBWWUywjOMPLb6Q==",
  "_location": "/upload",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "upload",
    "fetchSpec": "latest",
    "name": "upload",
    "raw": "upload",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/upload/-/upload-1.1.1.tgz",
  "_shasum": "3f7f08e2d31f66e22e1ad311c6856ce9cacd5771",
  "_shrinkwrap": null,
  "_spec": "upload",
  "_where": "/home/vaishakh/Desktop/Vaishakh/web development/Shpping Cart Project",
  "author": {
    "email": "contact@matsz.dev",
    "name": "Mat Sz"
  },
  "bugs": {
    "url": "https://github.com/mat-sz/upload/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "form-data": "^3.0.0"
  },
  "deprecated": false,
  "description": "Isomorphic TypeScript file upload library.",
  "devDependencies": {
    "@types/jest": "^25.1.4",
    "@types/node": "^14.0.9",
    "@typescript-eslint/eslint-plugin": "^3.1.0",
    "@typescript-eslint/parser": "^3.1.0",
    "eslint": "^7.1.0",
    "husky": "^4.2.3",
    "jest": "^25.2.6",
    "lint-staged": "^10.0.9",
    "prettier": "^2.0.2",
    "ts-jest": "^25.3.0",
    "typescript": "^3.7.4"
  },
  "homepage": "https://github.com/mat-sz/upload",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "http",
    "library",
    "typescript",
    "upload"
  ],
  "license": "BSD-3-Clause-Clear",
  "lint-staged": {
    "__tests__/**/*.{js,jsx,ts,tsx,json,css,scss,md}": [
      "prettier --write"
    ],
    "src/**/*.{js,jsx,ts,tsx,json,css,scss,md}": [
      "prettier --write"
    ]
  },
  "main": "lib/index.js",
  "name": "upload",
  "optionalDependencies": {},
  "private": false,
  "readme": "<h1 align=\"center\">\n<img src=\"https://raw.githubusercontent.com/mat-sz/upload/master/logo.png\" alt=\"upload\" width=\"700\">\n</h1>\n\n<p align=\"center\">\nIsomorphic TypeScript file upload library for browser and node.js environments.\n</p>\n\n<p align=\"center\">\n<img alt=\"workflow\" src=\"https://img.shields.io/github/workflow/status/mat-sz/upload/Node.js%20CI%20(yarn)\">\n<a href=\"https://npmjs.com/package/upload\">\n<img alt=\"npm\" src=\"https://img.shields.io/npm/v/upload\">\n<img alt=\"npm\" src=\"https://img.shields.io/npm/dw/upload\">\n<img alt=\"NPM\" src=\"https://img.shields.io/npm/l/upload\">\n</a>\n</p>\n\n<p align=\"center\">\n<strong>Quickstart:</strong>\n</p>\n\n```\nnpm install upload\n\n# ...or\n\nyarn add upload\n```\n\n## Example usage\n\n### upload function\n\n```ts\nimport { upload } from 'upload';\n\nasync function test() {\n  const response = await upload(\n    'https://example.com/upload',\n    {\n      file: someInput.file,\n    },\n    {\n      onProgress: progress => (element.innerText = progress * 100 + '%'),\n    }\n  );\n\n  console.log(response);\n}\n```\n\n### Upload class\n\n```ts\nasync function test() {\n  const upload = new Upload({\n    url: 'https://example.com/upload',\n    form: {\n      file: someInput.file,\n    },\n    headers: {\n      Authorization: 'Bearer TOKEN',\n    },\n  });\n\n  upload.on('progress', progress => {\n    element.innerText = progress * 100 + '%';\n  });\n\n  const response = await upload.upload();\n  console.log(response);\n\n  alert('Done!');\n}\n```\n\n### Abort request\n\n```ts\nconst upload = new Upload({\n  url: 'https://httpbin.org/post',\n  form: someInput.file,\n});\n\nupload.on('state', () => {\n  if (upload.state === 'aborted') doSomething();\n});\n\nupload.upload();\nupload.abort();\n```\n\n## Events\n\nYou can attach event listeners to an instance of `Upload` with `.on`:\n\n```ts\nupload.on('state', state => {\n  console.log(state);\n});\n```\n\n### state\n\nEmitted when upload state is changed. Possible states: `new`, `started`, `aborted`, `failed`, `successful`.\n\n### error\n\nEmitted when an error occurs.\n\n### progress (progress: number)\n\nEmitted when upload progress changes. Progress is a float between 0 and 1.\n\n## API\n\n```ts\ninterface UploadResponse {\n  data?: string | ArrayBuffer | Blob;\n  headers?: Record<string, string | string[] | undefined>;\n}\n\ninterface UploadOptions {\n  form: Record<string, string | Blob> | FormData | FormDataNode;\n  url: string;\n  headers?: Record<string, string>;\n}\n\ntype UploadState = 'new' | 'started' | 'aborted' | 'failed' | 'successful';\n\npublic state: UploadState;\npublic progress = 0;\npublic uploadedBytes = 0;\npublic totalBytes = 0;\n\nnew Upload(options: UploadOptions);\nupload(): Promise<UploadResponse>;\nabort(): void;\n\non(eventType: 'progress', listener: (progress: number) => void): void;\non(eventType: 'error', listener: () => void): void;\non(eventType: 'state', listener: (state: string) => void): void;\n\noff(eventType: 'progress', listener: (progress: number) => void): void;\noff(eventType: 'error', listener: () => void): void;\noff(eventType: 'state', listener: (state: string) => void): void;\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mat-sz/upload.git"
  },
  "scripts": {
    "build": "tsc",
    "lint": "eslint .",
    "prepare": "npm run build",
    "test": "jest"
  },
  "types": "lib/index.d.ts",
  "version": "1.1.1"
}
